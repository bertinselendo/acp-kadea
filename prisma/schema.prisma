datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String     @id @default(cuid())
  email            String?    @unique
  firstName        String?
  lastName         String?
  emailVerified    DateTime?
  avatar           String?
  role    Role     @default(GUEST)   // team-member | client

  accounts         Account[]
  sessions         Session[]

  client           Client?      @relation(fields: [clientId], references: [id], onDelete: SetNull)
  clientId         String?

  teamMembers      TeamMember[]
}

enum Role {
  GUEST
  CLIENT
  WORKER
  MANAGER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TeamMember {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  type        String    // internal | external
  companyName String?   // if type is external
  phone       String
  role        String    // admin | project-master | employer

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model Client {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  companyEmail   String    @unique
  phone          String?
  address        String?
  country        String
  companyName    String
  logo           String?
  categorie      String?    // Business sector
  size           String?    // Company size
  website        String?
  internalNote   String?

  users          User[]
  projects       Project[]
}

model Project {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  cover         String?    // Link to project cover image
  title         String
  description   String?
  startedDate   DateTime?
  endedDate     DateTime?
  status        String?
  budget        Float?

  client        Client      @relation(fields: [clientID], references: [id])
  clientID      String

  feedbacks     Feedback[]
  documents     Document[]
  invoices      Invoice[]
  accesses      Access[]
}

model Feedback {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  title         String
  usepastelLink String    // Link to usepastel feedback
  note          String?

  project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
}

model Document {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  title         String
  description   String?
  type          String    // External | Internal
  service       String?   // Document, Spreadsheet, Notion, etc.
  link          String?   // Link to the document
  file          String?   // File to upload
  
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
}

model Invoice {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  invoiceNumber String
  issueDate     DateTime
  amount        Float
  description   String?
  type          String    // Link or File
  link          String?    // Link to the invoice or file upload
  file          String?   // File to upload
  
  project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
}

model Access {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  service       String    // Website, Hosting, Domain, etc.
  username      String
  password      String
  adminUrl      String
  expiryDate    DateTime
  
  project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
}
